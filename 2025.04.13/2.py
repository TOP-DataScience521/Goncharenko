# Написать генераторную функцию с именем deck, которая создаёт упорядоченную колоду карт.

# Функция не принимает аргументы.

# Функция возвращает объект генератор.
    
#     На каждой итерации или при явном вызове специального метода __next__() генератор должен возвращать кортеж из двух элементов:
#         - целое число, обозначающее номинал карты: 2, 3 ... 10, 11 — валет, 12 — дама, 13 — король, 14 — туз
#         - строка, обозначающая масть карты: 'черви', 'бубны', 'пики', 'трефы'

# Колода упорядочивается следующим образом: сначала все номиналы червей, затем все номиналы бубен, затем все номиналы пик и в конце все номиналы треф.

# Написанную функцию необходимо протестировать вручную.
# Пример ручного теста:
#     >>> list(deck())[::13]
#     [(2, 'черви'), (2, 'бубны'), (2, 'пики'), (2, 'трефы')]

def deck():
    cards_denom = range(2,15)
    suits = ['черви', 'бубны', 'пики', 'трефы']

    for suit in suits:
        for card in cards_denom:
            yield (card, suit)      


print(list(deck())[::13])
print(list(deck())[::9])
print(list(deck())[::4])

# [(2, 'черви'), (2, 'бубны'), (2, 'пики'), (2, 'трефы')]
# [(2, 'черви'), (11, 'черви'), (7, 'бубны'), (3, 'пики'), (12, 'пики'), (8, 'трефы')]
# [(2, 'черви'), (6, 'черви'), (10, 'черви'), (14, 'черви'), (5, 'бубны'), (9, 'бубны'), (13, 'бубны'), (4, 'пики'), (8, 'пики'), (12, 'пики'), (3, 'трефы'), (7, 'трефы'), (11, 'трефы')]

